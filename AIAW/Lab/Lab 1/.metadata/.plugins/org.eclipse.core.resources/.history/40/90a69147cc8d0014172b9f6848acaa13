package eightPuzzle;

import java.util.ArrayList;
import java.util.List;

public class PuzzleSolver {
	private Board init_;
	private Board goal_;
	private List<Board> solution_;
	
	public PuzzleSolver(Board initState, Board goalState) {
		if (null == initState || null == goalState || initState.getSize() != goalState.getSize()) {
			throw new IllegalArgumentException();
		}
		init_ = initState;
		goal_ = goalState;
		solution_ = new ArrayList<>();
		solve();
	}
	
	public boolean     isSolvable()  {return solution_.size() > 0;}      
	public List<Board> getSolution() {return solution_;}

	private void solve() {
		if(init_.equals(goal_)) {
			solution_.add(init_);
			return;
		}
		PriorityQueue<Pair> pQ = new PriorityQueue<>();
		
	}
	
	private class Pair implements Comparable<Pair> {
		Board b;
		int cost;
		int numberOfSteps;
		
		public Pair(Board b, int cost, int numberOfSteps) {
			this.b = b;
			this.cost = cost;
			this.numberOfSteps = numberOfSteps;
		}

		@Override
		public int compareTo(Pair o) {
			return o.cost - cost;
		}
	}

}
