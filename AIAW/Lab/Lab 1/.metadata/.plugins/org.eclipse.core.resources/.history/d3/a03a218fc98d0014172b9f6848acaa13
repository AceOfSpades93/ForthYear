package eightPuzzle;

import java.util.Arrays;

public class Board {
	private int N_;
	private int[][] board_;
	
	private int getIndex(int i, int j) {return i * N_ + j; };
	
	private int[][] toMatrix() {
		int[][] board = new int[N_][N_];
		
		for (int i = 0; i < N_; ++i) {
			for (int j = 0; j < N_; ++j) {
				board[i][j] = board_[getIndex(i, j)];
			}
		}
		
		return board;
	}
	
	public Board(int[][] board) {
		if (null == board || 0 == board.length) {
			throw new IllegalArgumentException();
		}
		for (int[] row: board) {
			if (board.length != row.length) {
				throw new IllegalArgumentException();
			}
		}
		N_ = board.length;
		board_ = arrayFlatten(board);
	}
	
	public int[]   getFlattenBoard() {return Arrays.copyOf(board_, N_);}
	public int[][] getMatrixBoard()  {return toMatrix();}
	
	/*
	 *  the number of misplaced 
	 */
	
	public void manhattanDistance(Board goal) {
		if (null == goal || N_ != goal.N_) {
			throw new IllegalArgumentException();
		}
		
	}
	
	

}
