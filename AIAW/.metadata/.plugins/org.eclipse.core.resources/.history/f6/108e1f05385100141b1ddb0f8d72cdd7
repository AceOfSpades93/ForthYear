package search;

public class PuzzleBoard {
	private int N, M;
	private int hBlank, vBlank;
	private int[][] tiles_;
	
	public PuzzleBoard(int[][] tiles) {
		if (null == tiles || 0 == tiles.length || 0 == tiles[0].length) {
			throw new IllegalArgumentException();
		}
		
		N = tiles.length;
		M = tiles[0].length;
		
		for (int i = 0; i < N; ++i) {
			for (int j = 0; j < M; ++j) {
				tiles_[i][j] = tiles[i][j];
				if (0 == tiles[i][j]) {
					hBlank = i;
					vBlank = j;
				}
			}
		}
		
		tiles_[hBlank][vBlank] = N * M;
	}
	
	public int manhattan() {
		int dist = 0;
		
		for (int i = 0; i < N; ++i) {
			for (int j = 0; j < M; ++j) {
				dist += Math.abs(i - (tiles_[i][j] - 1) / N) + Math.abs(j - (tiles_[i][j] - 1) / M);
			}
		}
		
		return dist;
	}
	
	public int hammilton() {
		int dist = 0;
		
		for (int i = 0; i < N; ++i) {
			for (int j = 0; j  < M; ++j) {
				if (i * N + j  + 1 != tiles_[i][j] ) {
					++dist;
				}
			}
		}
		return dist;
	}
	
	public boolean isSolvable() {
		return false;
	}
	
	public Iterable<PuzzleBoard> neighbors() {
		return null;
	}
}
